\'use client\';\n\nimport { createPaymentAction } from \'@/actions/payment/createPayment/action\';\nimport { createRepositoryAction } from \'@/actions/repository/createRepository/action\';\nimport { CreateRepositoryInput, createRepositorySchema } from \'@/actions/repository/createRepository/schema\';\nimport { getRepositorySubmissionCountAction } from \'@/actions/repository/getRepositorySubmissionCount/action\';\nimport { FormInput } from \'@/components/common/Form/FormInput\';\nimport { FormSubmit } from \'@/components/common/Form/FormSubmit\';\nimport { FormTextArea } from \'@/components/common/Form/FormTextArea\';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \'@/components/common/Form/tooltip\';\nimport { Payment } from \'@/components/common/Payment\';\nimport { Form, FormField } from \'@/components/ui/form\';\nimport { zodResolver } from \'@hookform/resolvers/zod\';\nimport { GitBranch, Github } from \'lucide-react\';\nimport { useAction } from \'next-safe-action/hooks\';\nimport { useEffect, useState } from \'react\';\nimport { useForm } from \'react-hook-form\';\nimport { toast } from \'sonner\';\nimport { Filter } from \'@/components/common/Filter\';\n\nexport function SubmitRepoForm() {\n  const { executeAsync: createRepository, status: createRepositoryStatus } = useAction(createRepositoryAction);\n  const { executeAsync: createPayment, status: createPaymentStatus } = useAction(createPaymentAction);\n  const {\n    execute: getSubmissionCount,\n    result: submissionCountData,\n    status: submissionCountStatus\n  } = useAction(getRepositorySubmissionCountAction);\n  const submissionCount = submissionCountData?.data?.count ?? 0;\n  const canSubmit = submissionCount < 1;\n  const isLoading = createRepositoryStatus === \'executing\' || createPaymentStatus === \'executing\';\n\n  const [selectedTag, setSelectedTag] = useState(\'all\');\n  const [org, setOrg] = useState(\'\');\n  const [maintainer, setMaintainer] = useState(\'\');\n  const [onlyFeatured, setOnlyFeatured] = useState(false);\n\n  useEffect(() => {\n    getSubmissionCount();\n  }, [getSubmissionCount]);\n\n  const form = useForm<CreateRepositoryInput>({\n    resolver: zodResolver(createRepositorySchema),\n    defaultValues: {\n      title: \'\',\n      description: \'\',\n      githubUrl: \'\'\n    }\n  });\n\n  async function onPaymentSuccess(txHash: string) {\n    const values = form.getValues();\n    try {\n      const payment = await createPayment({\n        amount: 0.01,\n        transactionHash: txHash\n      });\n\n      if (payment?.data?.paymentRecord?.id) {\n        await createRepository(values);\n        toast.success(`Your repository has been submitted for voting.`);\n        form.reset();\n        getSubmissionCount();\n      }\n    } catch (error) {\n      console.error(\'Submission error:\', error);\n      toast.error(error instanceof Error ? error.message : \'An unexpected error occurred. Please try again.\');\n    }\n  }\n\n  const handleApplyFilters = () => {\n    // In a real application, you would refetch data based on these filters.\n    // For now, we'll just log them.\n    console.log({\n      selectedTag: selectedTag === \'all\' ? \'\' : selectedTag,\n      org,\n      maintainer,\n      onlyFeatured\n    });\n  };\n\n  return (\n    <div className=\'space-y-8\'>\n      <Form {...form}>\n        <form className=\'space-y-6\'>\n          <FormField\n            control={form.control}\n            name=\'title\'\n            render={({ field }) => (\n              <FormInput\n                field={field}\n                label=\'Repository Title\'\n                placeholder=\'My Awesome Project\'\n                disabled={isLoading || !canSubmit}\n                className=\'focus:ring-2 focus:ring-blue-500 focus:border-blue-500\'\n              />\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\'description\'\n            render={({ field }) => (\n              <FormTextArea\n                field={field}\n                label=\'Description\'\n                placeholder=\'Describe what your repository does, its key features, and why it should be voted on...\'\n                disabled={isLoading || !canSubmit}\n                className=\'min-h-[100px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500\'\n                minHeight=\'100px\'\n              />\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\'githubUrl\'\n            render={({ field }) => (\n              <FormInput\n                field={field}\n                label=\'GitHub Repository URL\'\n                placeholder=\'https://github.com/username/repository\'\n                disabled={isLoading || !canSubmit}\n                className=\'pl-10 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\'\n                prefixIcon={<Github className=\'h-4 w-4 text-gray-400\' />}\n              />\n            )}\n          />\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\'rounded-md bg-card\'>\n                  <div className=\'mt-2\'>\n                    {submissionCountStatus === \'executing\' && (\n                      <div className=\'flex items-center text-sm text-muted-foreground\'>\n                        <GitBranch className=\'mr-2 h-4 w-4\' />\n                        <div className=\'h-5 w-48 animate-pulse rounded-md bg-muted\' />\n                      </div>\n                    )}\n                    {submissionCountStatus === \'hasSucceeded\' && (\n                      <div className=\'flex items-center text-sm text-muted-foreground\'>\n                        <GitBranch className=\'mr-2 h-4 w-4\' />\n                        <span>\n                          <span className=\'font-bold text-primary\'>{submissionCount} / 1</span> repositories submitted\n                          this week.\n                        </span>\n                      </div>\n                    )}\n                    {submissionCountStatus === \'hasErrored\' && (\n                      <div className=\'flex items-center text-sm text-destructive\'>\n                        <GitBranch className=\'mr-2 h-4 w-4\' />\n                        <p>Could not load your submission count.</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>You can only submit one repository each week.</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n          {canSubmit ? (\n            <Payment onPaymentSuccess={onPaymentSuccess} isLoading={isLoading} />\n          ) : (\n            <FormSubmit disabled={true} isLoading={false}>\n              Submission Limit Reached\n            </FormSubmit>\n          )}\n        </form>\n      </Form>\n      <div className=\'mt-8\'>\n        <h2 className=\'mb-4 text-2xl font-bold\'>Filter Other Repositories</h2>\n        <Filter\n          selectedTag={selectedTag}\n          onTagChange={setSelectedTag}\n          org={org}\n          onOrgChange={setOrg}\n          maintainer={maintainer}\n          onMaintainerChange={setMaintainer}\n          onlyFeatured={onlyFeatured}\n          onFeaturedChange={setOnlyFeatured}\n          onApply={handleApplyFilters}\n        />\n      </div>\n    </div>\n  );\n}
