\'use client\';\nimport RepoCard from \'@/components/common/RepoCard\';\nimport RepoCardSkeleton from \'@/components/common/RepoCardSkeleton\';\nimport { ChartLine, Star } from \'lucide-react\';\nimport { useEffect, useState } from \'react\';\nimport { getTopReposThisWeekAction } from \'@/actions/repository/getTopReposThisWeek\';\nimport { Filter } from \'@/components/common/Filter\';\n\ntype RepoCardData = {\n  id: string;\n  owner: string | null;\n  name: string | null;\n  title: string;\n  description: string;\n  tags: string[];\n  totalVotes: number;\n  logoUrl: string | null;\n  isVerified?: boolean;\n};\n\nexport default function HomePage() {\n  const [repos, setRepos] = useState<RepoCardData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedTag, setSelectedTag] = useState(\'all\');\n  const [org, setOrg] = useState(\'\');\  const [maintainer, setMaintainer] = useState(\'\');\n  const [onlyFeatured, setOnlyFeatured] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      try {\n        const result = await getTopReposThisWeekAction({ limit: 6 });\n        setRepos(result?.data?.repositories || []);\n      } catch (e) {\n        setRepos([]);\n      }\n      setLoading(false);\n    })();\n  }, []);\n\n  const handleApplyFilters = () => {\n    // In a real application, you would refetch data based on these filters.\n    // For now, we'll just log them.\n    console.log({\n      selectedTag: selectedTag === \'all\' ? \'\' : selectedTag,\n      org,\n      maintainer,\n      onlyFeatured\n    });\n    // Example: Call an action to fetch filtered repositories\n    // getFilteredRepositoriesAction({ selectedTag, org, maintainer, onlyFeatured });\n  };\n\n  // Split repos for featured and top (first 3 as featured, next 3 as top)\n  const featuredRepos = repos.slice(0, 3);\n  const topRepos = repos.slice(3, 6);\n\n  return (\n    <section className=\'py-10 px-6 flex flex-col gap-10\'>\n      <div className=\'flex flex-col lg:flex-row gap-6\'>\n        <div className=\'lg:w-1/4\'>\n          <Filter\n            selectedTag={selectedTag}\n            onTagChange={setSelectedTag}\n            org={org}\n            onOrgChange={setOrg}\n            maintainer={maintainer}\n            onMaintainerChange={setMaintainer}\n            onlyFeatured={onlyFeatured}\n            onFeaturedChange={setOnlyFeatured}\n            onApply={handleApplyFilters}\n          />\n        </div>\n        <div className=\'lg:w-3/4 flex flex-col gap-10\'>\n          <div>\n            <h1 className=\'mb-8 flex items-center gap-3 text-3xl font-bold\'>\n              <Star className=\'h-7 w-7 text-orange-400\' fill=\'orange\' />\n              Featured Repositories\n            </h1>\n            <div className=\'grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3\'>\n              {loading ? (\n                <>\n                  <RepoCardSkeleton />\n                  <RepoCardSkeleton />\n                  <RepoCardSkeleton />\n                </>\n              ) : (\n                featuredRepos.map((repo, index) => (\n                  <RepoCard\n                    key={repo.id}\n                    id={repo.id}\n                    owner={repo.owner || \'\'}\n                    name={repo.name || repo.title}\n                    description={repo.description || \'\'}\n                    tags={repo.tags}\n                    votes={repo.totalVotes}\n                    cardType=\'featured\'\n                    logoUrl={repo.logoUrl || \'/logo.svg\'}\n                    isVerified={repo.isVerified || false}\n                    variant=\'default\'\n                    rank={index + 1} // Assign rank based on index for featured repos\n                  />\n                ))\n              )}\n            </div>\n          </div>\n          <div>\n            <h1 className=\'mb-8 flex items-center gap-3 text-3xl font-bold\'>\n              <ChartLine className=\'h-7 w-7 text-green-600\' />\n              Top Repositories\n            </h1>\n            <div className=\'grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3\'>\n              {loading ? (\n                <>\n                  <RepoCardSkeleton />\n                  <RepoCardSkeleton />\n                  <RepoCardSkeleton />\n                </>\n              ) : (\n                topRepos.map((repo, index) => (\n                  <RepoCard\n                    key={repo.id}\n                    id={repo.id}\n                    owner={repo.owner || \'\'}\n                    name={repo.name || repo.title}\n                    description={repo.description || \'\'}\n                    tags={repo.tags}\n                    votes={repo.totalVotes}\n                    cardType=\'default\'\n                    variant={index < 3 ? ([\'first\', \'second\', \'third\'] as const)[index] : \'default\'}\n                    logoUrl={repo.logoUrl || \'/logo.svg\'}\n                    // TODO: Replace with real favorite status (e.g., repo.isFavorited or userFavoritesSet.has(repo.id))\n                    isFavorited={false} // Placeholder, as real favorite status is not yet available in RepoCardData\n                    isVerified={repo.isVerified || false}\n                    rank={index + 4} // Assign rank with an offset for top repos\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}
